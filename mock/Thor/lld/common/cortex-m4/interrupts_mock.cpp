/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "Thor/lld/common/cortex-m4/interrupts.hpp"

#include <CppUTestExt/MockSupport.h>

void Thor::LLD::INT::setPriorityGrouping(const uint32_t priorityGroup)
{
    mock().actualCall("Thor::LLD::INT::setPriorityGrouping").withUnsignedIntParameter("priorityGroup", priorityGroup);
}

uint32_t Thor::LLD::INT::getPriorityGrouping()
{
    return static_cast<uint32_t>(mock().actualCall("Thor::LLD::INT::getPriorityGrouping").returnUnsignedIntValue());
}

void Thor::LLD::INT::setPriority(const IRQn_Type IRQn, const uint32_t preemptPriority, const uint32_t subPriority)
{
    mock().actualCall("Thor::LLD::INT::setPriority").withIntParameter("IRQn", static_cast<int>(IRQn)).withUnsignedIntParameter("preemptPriority", preemptPriority).withUnsignedIntParameter("subPriority", subPriority);
}

void Thor::LLD::INT::getPriority(const IRQn_Type IRQn, const uint32_t priorityGroup, uint32_t *const preemptPriority, uint32_t *const subPriority)
{
    mock().actualCall("Thor::LLD::INT::getPriority").withIntParameter("IRQn", static_cast<int>(IRQn)).withUnsignedIntParameter("priorityGroup", priorityGroup).withOutputParameter("preemptPriority", preemptPriority).withOutputParameter("subPriority", subPriority);
}

void Thor::LLD::INT::enableIRQ(const IRQn_Type IRQn)
{
    mock().actualCall("Thor::LLD::INT::enableIRQ").withIntParameter("IRQn", static_cast<int>(IRQn));
}

void Thor::LLD::INT::disableIRQ(const IRQn_Type IRQn)
{
    mock().actualCall("Thor::LLD::INT::disableIRQ").withIntParameter("IRQn", static_cast<int>(IRQn));
}

void Thor::LLD::INT::setPendingIRQ(const IRQn_Type IRQn)
{
    mock().actualCall("Thor::LLD::INT::setPendingIRQ").withIntParameter("IRQn", static_cast<int>(IRQn));
}

void Thor::LLD::INT::clearPendingIRQ(const IRQn_Type IRQn)
{
    mock().actualCall("Thor::LLD::INT::clearPendingIRQ").withIntParameter("IRQn", static_cast<int>(IRQn));
}

uint32_t Thor::LLD::INT::getPendingIRQ(const IRQn_Type IRQn)
{
    return static_cast<uint32_t>(mock().actualCall("Thor::LLD::INT::getPendingIRQ").withIntParameter("IRQn", static_cast<int>(IRQn)).returnUnsignedIntValue());
}

uint32_t Thor::LLD::INT::getActive(const IRQn_Type IRQn)
{
    return static_cast<uint32_t>(mock().actualCall("Thor::LLD::INT::getActive").withIntParameter("IRQn", static_cast<int>(IRQn)).returnUnsignedIntValue());
}

void Thor::LLD::INT::SystemReset()
{
    mock().actualCall("Thor::LLD::INT::SystemReset");
}

