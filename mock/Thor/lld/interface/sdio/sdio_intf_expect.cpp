/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s gnu++20
 */

#include "sdio_intf_expect.hpp"

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ {
MockExpectedCall& initialize(Chimera::Status_t __return__)
{
    return initialize(1, __return__);
}
MockExpectedCall& initialize(unsigned int __numCalls__, Chimera::Status_t __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Thor::LLD::SDIO::initialize");
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    return __expectedCall__;
}
} } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ {
MockExpectedCall& isSupported(CppUMockGen::Parameter<const Chimera::SDIO::Channel> channel, bool __return__)
{
    return isSupported(1, channel, __return__);
}
MockExpectedCall& isSupported(unsigned int __numCalls__, CppUMockGen::Parameter<const Chimera::SDIO::Channel> channel, bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Thor::LLD::SDIO::isSupported");
    if(channel.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("channel", static_cast<int>(channel.getValue())); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ {
MockExpectedCall& getDriver(CppUMockGen::Parameter<const Chimera::SDIO::Channel> channel, Thor::LLD::SDIO::Driver_rPtr __return__)
{
    return getDriver(1, channel, __return__);
}
MockExpectedCall& getDriver(unsigned int __numCalls__, CppUMockGen::Parameter<const Chimera::SDIO::Channel> channel, Thor::LLD::SDIO::Driver_rPtr __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Thor::LLD::SDIO::getDriver");
    if(channel.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("channel", static_cast<int>(channel.getValue())); }
    __expectedCall__.andReturnValue(static_cast<void*>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ {
MockExpectedCall& getResourceIndex(CppUMockGen::Parameter<const Chimera::SDIO::Channel> channel, Thor::LLD::RIndex_t __return__)
{
    return getResourceIndex(1, channel, __return__);
}
MockExpectedCall& getResourceIndex(unsigned int __numCalls__, CppUMockGen::Parameter<const Chimera::SDIO::Channel> channel, Thor::LLD::RIndex_t __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Thor::LLD::SDIO::getResourceIndex");
    if(channel.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("channel", static_cast<int>(channel.getValue())); }
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ {
MockExpectedCall& getResourceIndex(CppUMockGen::Parameter<const std::uintptr_t&> address, Thor::LLD::RIndex_t __return__)
{
    return getResourceIndex(1, address, __return__);
}
MockExpectedCall& getResourceIndex(unsigned int __numCalls__, CppUMockGen::Parameter<const std::uintptr_t&> address, Thor::LLD::RIndex_t __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Thor::LLD::SDIO::getResourceIndex");
    if(address.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withParameterOfType("std::uintptr_t", "address", &address.getValue()); }
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ {
MockExpectedCall& getChannel(CppUMockGen::Parameter<const std::uintptr_t&> address, Chimera::SDIO::Channel __return__)
{
    return getChannel(1, address, __return__);
}
MockExpectedCall& getChannel(unsigned int __numCalls__, CppUMockGen::Parameter<const std::uintptr_t&> address, Chimera::SDIO::Channel __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Thor::LLD::SDIO::getChannel");
    if(address.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withParameterOfType("std::uintptr_t", "address", &address.getValue()); }
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ {
MockExpectedCall& attachDriverInstances(Thor::LLD::SDIO::Driver *const driverList, CppUMockGen::Parameter<const size_t> numDrivers, bool __return__)
{
    return attachDriverInstances(1, driverList, numDrivers, __return__);
}
MockExpectedCall& attachDriverInstances(unsigned int __numCalls__, Thor::LLD::SDIO::Driver *const driverList, CppUMockGen::Parameter<const size_t> numDrivers, bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Thor::LLD::SDIO::attachDriverInstances");
    __expectedCall__.withOutputParameterOfTypeReturning("Thor::LLD::SDIO::Driver", "driverList", driverList);
    if(numDrivers.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("numDrivers", numDrivers.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } }

