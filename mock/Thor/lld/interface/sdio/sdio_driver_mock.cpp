/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s gnu++20
 */

#include "Thor/lld/interface/sdio/sdio_driver.hpp"

#include <CppUTestExt/MockSupport.h>

Thor::LLD::SDIO::Driver::Driver()
{
    mock().actualCall("Thor::LLD::SDIO::Driver::Driver");
}

Thor::LLD::SDIO::Driver::~Driver()
{
    mock().actualCall("Thor::LLD::SDIO::Driver::~Driver").onObject(this);
}

Chimera::Status_t Thor::LLD::SDIO::Driver::attach(Thor::LLD::SDIO::RegisterMap *const peripheral)
{
    return static_cast<Chimera::Status_t>(mock().actualCall("Thor::LLD::SDIO::Driver::attach").onObject(this).withOutputParameterOfType("Thor::LLD::SDIO::RegisterMap", "peripheral", peripheral).returnUnsignedIntValue());
}

Chimera::Status_t Thor::LLD::SDIO::Driver::reset()
{
    return static_cast<Chimera::Status_t>(mock().actualCall("Thor::LLD::SDIO::Driver::reset").onObject(this).returnUnsignedIntValue());
}

void Thor::LLD::SDIO::Driver::clockEnable()
{
    mock().actualCall("Thor::LLD::SDIO::Driver::clockEnable").onObject(this);
}

void Thor::LLD::SDIO::Driver::clockDisable()
{
    mock().actualCall("Thor::LLD::SDIO::Driver::clockDisable").onObject(this);
}

