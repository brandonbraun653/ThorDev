/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s gnu++20
 */

#include <CppUMockGen.hpp>

#include "Thor/lld/interface/sdio/sdio_driver.hpp"

#include <CppUTestExt/MockSupport.h>

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ { namespace Driver$ {
MockExpectedCall& Driver$ctor();
MockExpectedCall& Driver$ctor(unsigned int __numCalls__);
} } } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ { namespace Driver$ {
MockExpectedCall& Driver$dtor(CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__ = ::CppUMockGen::IgnoreParameter::YES);
MockExpectedCall& Driver$dtor(unsigned int __numCalls__, CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__ = ::CppUMockGen::IgnoreParameter::YES);
} } } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ { namespace Driver$ {
MockExpectedCall& attach(CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__, Thor::LLD::SDIO::RegisterMap *const peripheral, Chimera::Status_t __return__);
MockExpectedCall& attach(unsigned int __numCalls__, CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__, Thor::LLD::SDIO::RegisterMap *const peripheral, Chimera::Status_t __return__);
} } } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ { namespace Driver$ {
MockExpectedCall& reset(CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__, Chimera::Status_t __return__);
MockExpectedCall& reset(unsigned int __numCalls__, CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__, Chimera::Status_t __return__);
} } } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ { namespace Driver$ {
MockExpectedCall& clockEnable(CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__);
MockExpectedCall& clockEnable(unsigned int __numCalls__, CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__);
} } } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ { namespace Driver$ {
MockExpectedCall& clockDisable(CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__);
MockExpectedCall& clockDisable(unsigned int __numCalls__, CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__);
} } } } }

