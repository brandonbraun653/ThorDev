/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s gnu++20
 */

#include <CppUMockGen.hpp>

#include "Thor/lld/interface/sdio/sdio_intf.hpp"

#include <CppUTestExt/MockSupport.h>

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ {
MockExpectedCall& isSupported(CppUMockGen::Parameter<const Chimera::SDIO::Channel> channel, bool __return__);
MockExpectedCall& isSupported(unsigned int __numCalls__, CppUMockGen::Parameter<const Chimera::SDIO::Channel> channel, bool __return__);
} } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ {
MockExpectedCall& getResourceIndex(CppUMockGen::Parameter<const std::uintptr_t&> address, Thor::LLD::RIndex_t __return__);
MockExpectedCall& getResourceIndex(unsigned int __numCalls__, CppUMockGen::Parameter<const std::uintptr_t&> address, Thor::LLD::RIndex_t __return__);
} } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ {
MockExpectedCall& getChannel(CppUMockGen::Parameter<const std::uintptr_t&> address, Chimera::SDIO::Channel __return__);
MockExpectedCall& getChannel(unsigned int __numCalls__, CppUMockGen::Parameter<const std::uintptr_t&> address, Chimera::SDIO::Channel __return__);
} } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ {
MockExpectedCall& attachDriverInstances(Thor::LLD::SDIO::Driver *const driverList, CppUMockGen::Parameter<const size_t> numDrivers, bool __return__);
MockExpectedCall& attachDriverInstances(unsigned int __numCalls__, Thor::LLD::SDIO::Driver *const driverList, CppUMockGen::Parameter<const size_t> numDrivers, bool __return__);
} } } }

