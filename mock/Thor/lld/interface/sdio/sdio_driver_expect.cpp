/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s gnu++20
 */

#include "sdio_driver_expect.hpp"

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ { namespace Driver$ {
MockExpectedCall& Driver$ctor()
{
    return Driver$ctor(1);
}
MockExpectedCall& Driver$ctor(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Thor::LLD::SDIO::Driver::Driver");
    return __expectedCall__;
}
} } } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ { namespace Driver$ {
MockExpectedCall& Driver$dtor(CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__)
{
    return Driver$dtor(1, __object__);
}
MockExpectedCall& Driver$dtor(unsigned int __numCalls__, CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Thor::LLD::SDIO::Driver::~Driver");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<Thor::LLD::SDIO::Driver*>(__object__.getValue())); }
    return __expectedCall__;
}
} } } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ { namespace Driver$ {
MockExpectedCall& attach(CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__, Thor::LLD::SDIO::RegisterMap *const peripheral, Chimera::Status_t __return__)
{
    return attach(1, __object__, peripheral, __return__);
}
MockExpectedCall& attach(unsigned int __numCalls__, CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__, Thor::LLD::SDIO::RegisterMap *const peripheral, Chimera::Status_t __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Thor::LLD::SDIO::Driver::attach");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<Thor::LLD::SDIO::Driver*>(__object__.getValue())); }
    __expectedCall__.withOutputParameterOfTypeReturning("Thor::LLD::SDIO::RegisterMap", "peripheral", peripheral);
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    return __expectedCall__;
}
} } } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ { namespace Driver$ {
MockExpectedCall& reset(CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__, Chimera::Status_t __return__)
{
    return reset(1, __object__, __return__);
}
MockExpectedCall& reset(unsigned int __numCalls__, CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__, Chimera::Status_t __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Thor::LLD::SDIO::Driver::reset");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<Thor::LLD::SDIO::Driver*>(__object__.getValue())); }
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    return __expectedCall__;
}
} } } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ { namespace Driver$ {
MockExpectedCall& clockEnable(CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__)
{
    return clockEnable(1, __object__);
}
MockExpectedCall& clockEnable(unsigned int __numCalls__, CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Thor::LLD::SDIO::Driver::clockEnable");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<Thor::LLD::SDIO::Driver*>(__object__.getValue())); }
    return __expectedCall__;
}
} } } } }

namespace expect { namespace Thor$ { namespace LLD$ { namespace SDIO$ { namespace Driver$ {
MockExpectedCall& clockDisable(CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__)
{
    return clockDisable(1, __object__);
}
MockExpectedCall& clockDisable(unsigned int __numCalls__, CppUMockGen::Parameter<const Thor::LLD::SDIO::Driver*> __object__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "Thor::LLD::SDIO::Driver::clockDisable");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<Thor::LLD::SDIO::Driver*>(__object__.getValue())); }
    return __expectedCall__;
}
} } } } }

