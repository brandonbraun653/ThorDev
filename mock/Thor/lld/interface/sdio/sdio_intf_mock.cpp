/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s gnu++20
 */

#include "Thor/lld/interface/sdio/sdio_intf.hpp"

#include <CppUTestExt/MockSupport.h>

bool Thor::LLD::SDIO::isSupported(const Chimera::SDIO::Channel channel)
{
    return mock().actualCall("Thor::LLD::SDIO::isSupported").withIntParameter("channel", static_cast<int>(channel)).returnBoolValue();
}

Thor::LLD::RIndex_t Thor::LLD::SDIO::getResourceIndex(const std::uintptr_t address)
{
    return static_cast<Thor::LLD::RIndex_t>(mock().actualCall("Thor::LLD::SDIO::getResourceIndex").withParameterOfType("std::uintptr_t", "address", &address).returnUnsignedIntValue());
}

Chimera::SDIO::Channel Thor::LLD::SDIO::getChannel(const std::uintptr_t address)
{
    return static_cast<Chimera::SDIO::Channel>(mock().actualCall("Thor::LLD::SDIO::getChannel").withParameterOfType("std::uintptr_t", "address", &address).returnIntValue());
}

bool Thor::LLD::SDIO::attachDriverInstances(Thor::LLD::SDIO::Driver *const driverList, const size_t numDrivers)
{
    return mock().actualCall("Thor::LLD::SDIO::attachDriverInstances").withOutputParameterOfType("Thor::LLD::SDIO::Driver", "driverList", driverList).withUnsignedLongIntParameter("numDrivers", numDrivers).returnBoolValue();
}

